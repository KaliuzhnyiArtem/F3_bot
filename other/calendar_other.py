

# Database
from database.training_history_db import get_training_by_date, count_trainings_on_times
from database.workers_dp import get_weekens_worker_by_mounth, get_day_with_training

# Other
from other.client_other import get_trainer_id_client, type_trening
from other.trainer_other import get_traniner_id, get_trainer_tg_id
import datetime
import calendar


async def get_current_mounth() -> int:
    return datetime.date.today().month


async def get_current_year() -> int:
    return datetime.date.today().year


async def get_current_day() -> int:
    return datetime.date.today().year


async def get_current_data() -> str:
    year = await get_current_year()
    month = await get_current_mounth()
    day = await get_current_day()
    return f'{year}-{month}-{day}'


async def generate_weeks(year, month) -> list:
    """
    –ì–µ–Ω–µ—Ä—É—î –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π —Å–ø–∏—Å–æ–∫ —Ç–∏–∂–Ω—ñ–≤ –∑–∞–¥–∞–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è

    :param year:
    :param month:
    :return: –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —Ç–∏–∂–Ω—ñ–≤, —Ç–∏–∂–Ω—ñ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ñ —É –≤–∏–≥–ª—è–¥—ñ —Å–ø–∏—Å–∫—ñ–≤ –∑ –¥–Ω—è–º–∏
    """
    weeks = []
    cal = calendar.monthcalendar(year, month)

    for week in cal:
        days = []
        for day in week:
            if day == 0:
                days.append(None)
            else:
                days.append(day)
        weeks.append(days)

    return weeks


async def generate_hours_table() -> list:
    colum1 = []
    colum2 = []
    colum3 = []

    for i in range(7, 12):
        if i == 7:
            colum1.append(f"{i}:30")
        else:
            colum1.append(f'{i}:00')
            colum1.append(f"{i}:30")

    for i in range(12, 17):
        if i == 16:
            colum2.append(f'{i}:00')
        else:
            colum2.append(f'{i}:00')
            colum2.append(f"{i}:30")

    for i in range(16, 21):
        if i == 16:
            colum3.append(f"{i}:30")
        else:
            colum3.append(f'{i}:00')
            colum3.append(f"{i}:30")

    return [colum1, colum2, colum3]


def get_name_month(nomb_month: int) -> str:
    name_month = ['–°—ñ—á–µ–Ω—å',
                  '–õ—é—Ç–∏–π',
                  '–ë–µ—Ä–µ–∑–µ–Ω—å',
                  '–ö–≤—ñ—Ç–µ–Ω—å',
                  '–¢—Ä–∞–≤–µ–Ω—å',
                  '–ß–µ—Ä–≤–µ–Ω—å',
                  '–õ–∏–ø–µ–Ω—å',
                  '–°–µ—Ä–ø–µ–Ω—å',
                  '–í–µ—Ä–µ—Å–µ–Ω—å',
                  '–ñ–æ–≤—Ç–µ–Ω—å',
                  '–õ–∏—Å—Ç–æ–ø–∞–¥',
                  '–ì—Ä—É–¥–µ–Ω—å',
                  ]
    return name_month[nomb_month-1]


async def edit_generate_weeks(worker_tg_id: int, year: int, month: int, calendar_list: list) -> list:
    """
    –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.
    –°—Ç–∞–≤–∏—Ç—å —Å–º–∞–π–ª–∏–∫–∏ –Ω–∞ —Ç—ñ –¥–Ω—ñ, –Ω–∞ —è–∫—ñ –≤–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ñ –≤–∏—Ö—ñ–¥–Ω—ñ

    :param worker_tg_id:
    :param year:
    :param month:
    :param calendar_list:
    :return:
    """
    ls_weekends = await get_weekens_worker_by_mounth(worker_tg_id, month)

    for free_day in ls_weekends:
        for weeks in range(len(calendar_list)):
            if free_day[0].day in calendar_list[weeks]:
                value_index = calendar_list[weeks].index(free_day[0].day)
                calendar_list[weeks][value_index] = 'ü•≥'
    return calendar_list


async def edit_day_with_trainings(worker_tg_id: int, year: int, month: int, calendar_list: list):
    """
    –†–µ–¥–∞–≥—É—î –∫–∞–ª–µ–Ω—Ç–∞–¥—å, –ø–µ—Ä–µ–≤—ñ—Ä—è—î –≤ —è–∫—ñ –¥–Ω—ñ —É —Ç—Ä–µ–Ω–µ—Ä–∞ –≤–∂–µ —î —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è,
    —ñ –∑–∞–º—ñ–Ω—è—î —Ü—ñ –¥–Ω—ñ –Ω–∞ —Å–º–∞–π–∫–ª –∑ –∫–∞—á–∫–æ–º
    :return:
    """
    worker_id = await get_traniner_id(worker_tg_id)
    ls_day_with_training = await get_day_with_training(worker_id, month, year)

    for day_with_training in ls_day_with_training:
        for weeks in range(len(calendar_list)):
            if day_with_training[0].day in calendar_list[weeks]:
                value_index = calendar_list[weeks].index(day_with_training[0].day)
                calendar_list[weeks][value_index] = 'üèãÔ∏è'
    return calendar_list


async def filter_calendar_for_weekeds(worker_tg_id, year, month) -> list:
    """
    –§—ñ–ª—å—Ç—Ä—É—î (—Ä–µ–¥–∞–≥—É—î ) —Å—Ç–∞–Ω–¥–∞—Ä–Ω–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤–∏—Ö—ñ–¥–Ω–∏—Ö –¥–Ω—ñ–≤.
    –ö–∞–ª–µ–Ω–¥–∞—Ä—å –≤–∏–≤–æ–¥–∏—Ç—å—Å—è –∞–¥–º—ñ–Ω—É

    :param worker_tg_id:
    :param year:
    :param month:
    :return:
    """
    calendar_list = await generate_weeks(year, month)

    calendar_list = await edit_generate_weeks(worker_tg_id, year, month, calendar_list)
    calendar_list = await edit_day_with_trainings(worker_tg_id, year, month, calendar_list)
    return calendar_list


async def _edit_day_trainer_weekend(client_tg_id: int, year: int, month: int, calendar_list: list):
    """
    –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è

    :param client_tg_id:
    :param year:
    :param month:
    :param calendar_list:
    :return:
    """
    defolt_trainer_id = await get_trainer_id_client(client_tg_id)
    trainer_tg_id = await get_trainer_tg_id(defolt_trainer_id)

    ls_weekends = await get_weekens_worker_by_mounth(trainer_tg_id, month)

    for free_day in ls_weekends:
        for weeks in range(len(calendar_list)):
            if free_day[0].day in calendar_list[weeks]:
                value_index = calendar_list[weeks].index(free_day[0].day)
                calendar_list[weeks][value_index] = None
    return calendar_list


async def _days_done(calendar_list: list, month: int):
    '''
    –ü—Ä–∏–±–∏—Ä–∞—î –∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–Ω—ñ —è–∫—ñ –≤–∂–µ –ø—Ä–æ–π—à–ª–∏

    :param calendar_list:
    :param month:
    :return:
    '''
    day = datetime.date.today().day
    current_mounth = datetime.date.today().month

    if current_mounth == month:
        ls_day_done = [i for i in range(1, day)]
        for day_done in ls_day_done:
            for weeks in range(len(calendar_list)):
                if day_done in calendar_list[weeks]:
                    value_index = calendar_list[weeks].index(day_done)
                    calendar_list[weeks][value_index] = None
    return calendar_list


async def filter_calendar_for_training(client_tg_id: int, year: int, month: int) -> list:
    """
    –§—ñ–ª—å—Ç—Ä—É—î (—Ä–µ–¥–∞–≥—É—î ) —Å—Ç–∞–Ω–¥–∞—Ä–Ω–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω—å.


    :param client_tg_id:
    :param year:
    :param month:
    :return:
    """

    calendar_list = await generate_weeks(year, month)

    calendar_list = await _days_done(calendar_list, month)
    calendar_list = await _edit_day_trainer_weekend(client_tg_id, year, month, calendar_list)

    return calendar_list


async def only_one_training(client_tg_id: int, chois_data, hours_table):
    """
    –§—ñ–ª—å—Ç—Ä –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≥–æ–¥–∏–Ω –ø—Ä–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—ñ –ø—Ä–æ–±–Ω–æ–±–Ω–æ–≥–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
    –°–∫—Ä–∏–≤–∞—î –≥–æ–¥–∏–Ω–∏ —è–∫—â–æ —É —Ç—Ä–µ–Ω–µ—Ä–∞ –≤ —Ü–µ–π —á–∞—Å —î —Ö–æ—á–∞–± 1 —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è

    :param client_tg_id:
    :param chois_data:
    :param hours_table:
    :return:
    """
    defolt_trainer_id = await get_trainer_id_client(client_tg_id)

    ls_training = await get_training_by_date(defolt_trainer_id, chois_data)

    for training in ls_training:
        for column in range(len(hours_table)):

            if training[0] in hours_table[column]:
                value_index = hours_table[column].index(training[0])
                hours_table[column][value_index] = None

    return hours_table


async def only_three_training(client_tg_id, chois_data, hours_table):
    '''
    –§—ñ–ª—å—Ç—Ä –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≥–æ–¥–∏–Ω –ø—Ä–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
    –°–∫—Ä–∏–≤–∞—î –≥–æ–¥–∏–Ω–∏ —è–∫—â–æ —É —Ç—Ä–µ–Ω–µ—Ä–∞ –≤ —Ü–µ–π —á–∞—Å —î 3 –∞–±–æ –±—ñ–ª—å—à–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—å
    :return:
    '''
    defolt_trainer_id = await get_trainer_id_client(client_tg_id)

    ls_count_training = await count_trainings_on_times(defolt_trainer_id, chois_data)
    for trainings in ls_count_training:
        if trainings[1] >= 3:
            for column in range(len(hours_table)):
                if trainings[0] in hours_table[column]:
                    value_index = hours_table[column].index(trainings[0])
                    hours_table[column][value_index] = None

    return hours_table


async def filter_hour_inline(client_tg_id: int, chois_data):
    """
    –§—ñ–ª—å—Ç—Ä—É—î (—Ä–µ–¥–∞–≥—É—î ) —Å—Ç–∞–Ω–¥–∞—Ä–Ω–∏–π –º–µ–Ω—é –≤–∏–±–æ—Ä—É —á–∞—Å—É.
    :return:
    """

    tp_trainnig = await type_trening(client_tg_id)

    hours_table = await generate_hours_table()

    if tp_trainnig == 'trial':
        hours_table = await only_one_training(client_tg_id, chois_data, hours_table)

    hours_table = await only_three_training(client_tg_id, chois_data, hours_table)
    return hours_table


async def filter_calendar_for_trainer(year, month):
    '''
    –§—ñ–ª—å—Ç—Ä—É—î –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç—Ä–µ–Ω–µ—Ä–∞–º —Å–ø–∏—Å–∫–∞ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö —Ç—Ä–µ–Ω–≤–∞–Ω—å:
    :return:
    '''

    calendar_list = await generate_weeks(year, month)
    calendar_list = await _days_done(calendar_list, month)

    return calendar_list







