# Aiogram
from keybords.trainer_menu import trainers_menu
from loader import bot
from aiogram import types

# Database
from database.msg_id_history_db import get_message_history, dell_message_id, \
    add_message_history, add_message_from_bot
from database.user_db import check_user, check_admin, check_trainer

# Other
from keybords.menu_buttons import reply_get_contact, main_menu
from keybords.admin_menu import r_admin_menu
from other.calendar_other import get_current_year
from other.system import sleep_time
from state.reg import Reg



async def ent_in_menu(chat_id: int):
    msg = await bot.send_message(chat_id=chat_id, text='–í–∏ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é', reply_markup=await main_menu(chat_id))
    await dell_message(chat_id=chat_id)
    await add_message_history(user_id=chat_id, message_id=msg.message_id)


async def ent_in_menu_admin(chat_id: int):
    msg = await bot.send_message(chat_id=chat_id, text='–ê–¥–º—ñ–Ω –º–µ–Ω—é', reply_markup=r_admin_menu)

    await dell_message(chat_id=chat_id)

    await add_message_history(user_id=chat_id, message_id=msg.message_id)


async def ent_in_menu_trainer(chat_id: int):
    msg = await bot.send_message(chat_id=chat_id, text='–ú–µ–Ω—é –¢—Ä–µ–Ω–µ—Ä–∞', reply_markup=trainers_menu)
    await dell_message(chat_id)
    await add_message_from_bot(msg)


async def dell_message(chat_id: int):
    msg_history = await get_message_history(chat_id)
    for i in msg_history:
        try:
            await bot.delete_message(chat_id=chat_id, message_id=i[0])
            await dell_message_id(i[0])
        except:
            await dell_message_id(i[0])


async def action_simple_text(message):
    await dell_message(message.chat.id)
    await add_message_history(user_id=message.from_user.id,
                              message_id=message.message_id)


# Action when detected new user
async def action_new_user(message):
    msg = await message.answer(f"–ü—Ä–∏–≤—ñ—Ç, {message.chat.first_name} üòä\n\n"
                               f"–ù–∞ –∑–≤'—è–∑–∫—É —á–∞—Ç-–±–æ—Ç F-3. \n\n"
                               f"–ó—ñ –º–Ω–æ—é –≤–∏ –º–æ–∂–µ—Ç–µ:\n"
                               f"-–ü—Ä–∏–¥–±–∞—Ç–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç.\n"
                               f"-–ó–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –º–∞—Å–∞–∂.\n"
                               f"-–ù–∞–∑–Ω–∞—á–∏—Ç–∏ –¥–∞—Ç—É —Ç–∞ —á–∞—Å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è.\n"
                               f"-–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –±—É–¥—å —è–∫—ñ –ø–∏—Ç–∞–Ω–Ω—ñ .\n\n"

                               f" –î–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤ –±–æ—Ç—ñ –Ω–∞–¥–∞–π—Ç–µ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.",
                               reply_markup=reply_get_contact)
    await add_message_from_bot(msg)
    await Reg.phone.set()


# Decorator for check user
def decorator_check_user(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä —è–∫–∏–π –ø–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
    —è–∫—â–æ –Ω—ñ —Ç–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î –Ω–∞ —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü—ñ—é

    :param func:
    :return:
    """
    async def wrepper(*args, **kwargs):
        message = args[0]

        await action_simple_text(message)

        if await check_user(message.from_user.id):
            try:
                await func(message, kwargs['state'])
            except TypeError:
                await func(message)
        else:
            await action_new_user(message)
    return wrepper


# Decorator for check admin
def decorator_check_admin(func):
    async def wrepper(*args, **kwargs):
        message = args[0]

        if await check_admin(message.from_user.id):
            await action_simple_text(message)
            try:
                await func(message, kwargs['state'])
            except TypeError:
                await func(message)
        else:
            await add_message_history(user_id=message.from_user.id,
                                      message_id=message.message_id)
    return wrepper


# Decorator for check trainer
def decorator_check_trainer(func):
    async def wrepper(*args, **kwargs):
        message = args[0]

        if await check_trainer(message.from_user.id):
            await action_simple_text(message)
            try:
                await func(message, kwargs['state'])
            except TypeError:
                await func(message)
        else:
            await add_message_history(user_id=message.from_user.id,
                                      message_id=message.message_id)
    return wrepper


# Status trainer
def status_trainer(status_id) -> str:
    if status_id == 1:
        status = 'active'
    else:
        status = 'no active'
    return status





async def callback_ending(callback) -> int:
    """
    –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –¥–∞–Ω–Ω–∏—Ö callback.
    –í—Å–µ —â–æ –π–¥–µ –ø—ñ—Å–ª—è -

    :param callback:
    :return int:
    """

    return int(callback.data.split("-")[1])


def get_data_from_fetchall(values):
    if values:
        return values[0][0]
    else:
        return []


def get_data_from_fetchall0(values):
    if values:
        return values[0][0]
    else:
        return 0


async def get_chois_data(state) -> str:
    year = await get_current_year()
    training_data = await state.get_data()
    chois_data = f"{year}-{training_data['last_month']}-{training_data['choised_day']}"

    return chois_data


# –í–∏–∫–ª–∏–∫–∞—ç–º–æ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –∑–º—ñ–Ω–∏ –¥–∞–Ω–Ω–∏—Ö –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
async def well_done_client(message, state):

    msg = await message.answer(text='–ó–º—ñ–Ω–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ‚úÖ')

    await add_message_from_bot(msg)
    await state.finish()

    await sleep_time(2)
    await ent_in_menu(message.chat.id)












