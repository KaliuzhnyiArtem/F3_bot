# Aiogram
from database.msg_id_history_db import add_message_history, add_message_from_bot
from database.workers_dp import insert_new_trainer, insert_new_massaur
from keybords.menu_buttons import r_choise_work
from loader import dp, bot
from aiogram import types
from aiogram.dispatcher import FSMContext

# Database
from other.admin_other import check_worker, update_status_worker
from other.func_other import decorator_check_trainer, ent_in_menu, dell_message
from other.system import sleep_time
from state.reg import RegWorker



@dp.message_handler(commands=['newworker'])
async def new_worker_menu(message: types.Message, state: FSMContext):
    print('Enterh in new worker')
    await add_message_history(message.from_user.id, message.message_id)


    if await check_worker(message.from_user.id, 4):
        msg = await message.answer(text='–ó–∞—è–≤–∫–∞ –≤–∂–µ –ø–æ–¥–∞–Ω–∞, –æ—á—ñ–∫—É–π–¥–µ –Ω–∞ —Ä—ñ—à–µ–Ω–Ω—èüòä')
        await dell_message(message.from_user.id)
        await add_message_from_bot(msg)

        await sleep_time(1.5)
        await ent_in_menu(message.from_user.id)
    elif await check_worker(message.from_user.id, 1):
        msg = await message.answer(text='–í–∏ –≤–∂–µ –ø—Ä–∞—Ü—é—î—Ç–µ —É –Ω–∞—Åü•≥')
        await dell_message(message.from_user.id)
        await add_message_from_bot(msg)

        await sleep_time(2)
        await ent_in_menu(message.from_user.id)

    elif await check_worker(message.from_user.id, 2):
        msg = await message.answer(text='–í–∏ –≤–∂–µ –ø—Ä–∞—Ü—é—î—Ç–µ —É –Ω–∞—Åü•≥.\n\n'
                                        '–ê–ª–µ —É –≤–∞—Å —Å—Ç–æ—ó—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–∞—Ç—É—Å\n'
                                        '–ê–¥–º—ñ–Ω—ñ–Ω—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –∑–º—ñ–Ω–∏—Ç–∏ –π–æ–≥–æ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–∏–π')
        await dell_message(message.from_user.id)
        await add_message_from_bot(msg)

        await sleep_time(3)
        await ent_in_menu(message.from_user.id)

    elif await check_worker(message.from_user.id, 3):
        msg = await message.answer(text='–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞‚úÖ')
        await dell_message(message.from_user.id)
        await add_message_from_bot(msg)
        await update_status_worker(message.from_user.id, 4)

        await sleep_time(1.5)
        await ent_in_menu(message.from_user.id)

    else:
        msg = await message.answer(text='–û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–∞–¥—É', reply_markup=r_choise_work)
        await dell_message(message.from_user.id)
        await add_message_from_bot(msg)
        await RegWorker.choise_work.set()


@dp.message_handler(lambda message: message.text in ['–¢—Ä–µ–Ω–µ—ÄüèãÔ∏è', '–ú–∞—Å–∞–∂–∏—Å—ÇüíÜüèª'], state=RegWorker.choise_work)
async def trainer_menu(message: types.Message, state: FSMContext):
    await add_message_history(message.from_user.id, message.message_id)

    if message.text == '–¢—Ä–µ–Ω–µ—ÄüèãÔ∏è':
        await insert_new_trainer(name=message.from_user.first_name,
                                 telegram_id=message.from_user.id,
                                 id_trainer_status=4
                                 )
    else:
        await insert_new_massaur(name=message.from_user.first_name,
                                 telegram_id=message.from_user.id,
                                 id_trainer_status=4
                                 )

    msg = await message.answer(text='–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞‚úÖ')
    await dell_message(message.from_user.id)
    await add_message_from_bot(msg)
    await state.finish()

    await sleep_time(1.5)
    await ent_in_menu(message.from_user.id)