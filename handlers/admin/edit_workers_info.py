# Aiogram

from loader import dp, bot
from aiogram import types
from aiogram.dispatcher import FSMContext

# Database
from database.msg_id_history_db import add_message_from_bot
from database.workers_dp import update_worker_description

# Other
from other.admin_other import well_done, get_info_worker, update_foto_worker, convert_corect_text, update_worker_fio, \
    get_status_worker, update_status_worker, answer_workers_list
from other.func_other import decorator_check_admin, dell_message, status_trainer
from keybords.admin_menu import e_edit_workers_info, r_menu_worker_card, r_back_to_menu_admin, \
    status_tr
from state.reg import Card


@dp.message_handler(lambda message: message.text == "–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—Éüìù")
@decorator_check_admin
async def edit_list_workers(message: types.Message,):
    msg = await message.answer("–û–±–µ—Ä—ñ—Ç—å –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞", reply_markup=e_edit_workers_info)
    await add_message_from_bot(msg)
    await answer_workers_list(message, "worker")


@dp.callback_query_handler(lambda callback: callback.data.startswith('worker'))
async def chois_worker(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer('–ö–∞—Ä—Ç–∫–∞ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞')
    telegram_id = callback.data.split('-')[1]

    msg = await callback.message.answer(text='.')
    await dell_message(callback.from_user.id)
    await add_message_from_bot(msg)

    trainer_info = await get_info_worker(telegram_id)

    await state.update_data(telegram_worker_id=telegram_id, trainer_photo=trainer_info[0][4])

    if trainer_info[0][4] is not None:
        msg1 = await callback.bot.send_photo(chat_id=callback.from_user.id, photo=trainer_info[0][4])
        await add_message_from_bot(msg1)

    msg = await callback.message.answer(text=f'–ö–∞—Ä—Ç–∫–∞ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞\n'
                                             f'–§–Ü–û: {trainer_info[0][1]} {trainer_info[0][2]}\n\n'
                                             f'–°—Ç–∞—Ç—É—Å: {status_trainer(trainer_info[0][5])}\n\n'
                                             f'–û–ø–∏—Å: {trainer_info[0][6]}', reply_markup=r_menu_worker_card)

    await add_message_from_bot(msg)


@dp.message_handler(lambda message: message.text == "–ó–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Ç–æüì∑")
@decorator_check_admin
async def edit_list_workers(message: types.Message):

    msg = await message.answer('–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –Ω–æ–≤–µ —Ñ–æ—Ç–æ', reply_markup=r_back_to_menu_admin)
    await add_message_from_bot(msg)
    await Card.getphoto.set()


@dp.message_handler(content_types=['photo'], state=Card.getphoto)
@decorator_check_admin
async def get_photo(message: types.Message, state: FSMContext):
    photo_id = message.photo[0]['file_id']
    worker_tg_id = await state.get_data()

    await update_foto_worker(photo_id, worker_tg_id["telegram_worker_id"])

    await well_done(message, state)


@dp.message_handler(lambda message: message.text == "–ó–º—ñ–Ω–∏—Ç–∏ –§–Ü–ûüìî")
@decorator_check_admin
async def edit_list_workers(message: types.Message):

    msg = await message.answer('–í–≤–µ–¥—ñ–¥—Ç—å –Ω–æ–≤–µ –Ü–º—è —Ç–∞ –§–∞–º—ñ–ª—ñ—é –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ (–Ü–≤–∞–Ω –°—Ç—Ä—ñ–ª–µ—Ü—å). \n\n'
                               '–Ø–∫—â–æ –ø–ª–∞–Ω—É—î—Ç–µ –∑–º—ñ–Ω—ñ—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Ñ–∞–º—ñ–ª—ñ—é –∞–±–æ —ñ–º—è, –≤—Å–µ—Ä—ñ–≤–Ω–æ –ø–∏—à—ñ—Ç—å —ñ–º—è —Ç–∞ —Ñ–∞–º—ñ–ª—ñ—é',
                               reply_markup=r_back_to_menu_admin)
    await add_message_from_bot(msg)
    await Card.getname.set()


# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∞ –∑–º—ñ–Ω–∞ –§–Ü–û
@dp.message_handler(state=Card.getname)
@decorator_check_admin
async def edit_list_workers(message: types.Message, state: FSMContext):
    fio = await convert_corect_text(message.text)
    fio = fio.split(' ')

    worker_tg_id = await state.get_data()

    if len(fio) == 2:
        await update_worker_fio(fio[0], fio[1], worker_tg_id["telegram_worker_id"])

        await well_done(message, state)

    else:
        msg = await message.answer(text='üôÖ‚Äç‚ôÇÔ∏è–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥—É\n\n'
                                        '–û–±–æ–≤—è–∑–∫–æ–≤–æ –≤–≤–æ–¥–∏—Ç—å—Å—è –Ü–º—è —Ç–∞ –§–∞–º—ñ–ª—ñ—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª',
                                   reply_markup=r_back_to_menu_admin)
        await add_message_from_bot(msg)


@dp.message_handler(lambda message: message.text == "–ó–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Åüìä")
@decorator_check_admin
async def edit_list_workers(message: types.Message, state: FSMContext):
    worker_tg_id = await state.get_data()
    worker_status = await get_status_worker(worker_tg_id["telegram_worker_id"])

    if worker_status[0][0] == 1:
        msg = await message.answer(text='–ë–∞–∂–∞—î—Ç–µ –Ω–∞–¥–∞—Ç–∏ —Ç—Ä–µ–Ω–µ—Ä—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–∞—Ç—É—Å?',
                                   reply_markup=status_tr(worker_status[0][0]))
        await add_message_from_bot(msg)

    elif worker_status[0][0] == 2:
        msg = await message.answer(text='–ë–∞–∂–∞—î—Ç–µ –Ω–∞–¥–∞—Ç–∏ —Ç—Ä–µ–Ω–µ—Ä—É –∞–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–∞—Ç—É—Å?',
                                   reply_markup=status_tr(worker_status[0][0]))

        await add_message_from_bot(msg)

    await Card.change_trainer_status.set()


@dp.message_handler(state=Card.change_trainer_status)
@decorator_check_admin
async def edit_tariner_status(message: types.Message, state: FSMContext):
    worker_tg_id = await state.get_data()

    if message.text == '–ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–πüëéüèª':
        await update_status_worker(worker_tg_id["telegram_worker_id"], 2)
        await well_done(message, state)
    elif message.text == '–ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–∏–πüëçüèª':

        if worker_tg_id["trainer_photo"]:
            await update_status_worker(worker_tg_id["telegram_worker_id"], 1)
            await well_done(message, state)
        else:
            msg = await message.answer(text='–ù–µ –≤–¥–∞–ª–æ—Å—å –∑–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å.\n'
                                            '–£ –ø—Ä–∞–≤—Ü—ñ–≤–Ω–∏–∫–∞ –≤—ñ–¥—Å—É—Ç–Ω—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—è',
                                       reply_markup=r_back_to_menu_admin)

            await add_message_from_bot(msg)


# –ó–º—ñ–Ω–∞ –æ–ø–∏—Å—É —Ç—Ä–µ–Ω–µ—Ä–∞
@dp.message_handler(lambda message: message.text == "–ó–º—ñ–Ω–∏—Ç–∏ –æ–ø–∏—Åüìù")
@decorator_check_admin
async def edit_description_trainer(message: types.Message):

    msg = await message.answer(text='–í—ñ–¥–ø—Ä–∞–≤—Ç–µ –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –ø—Ä–æ —Ç—Ä–µ–Ω–µ—Ä–∞',
                               reply_markup=r_back_to_menu_admin)
    await add_message_from_bot(msg)

    await Card.getdescription.set()


@dp.message_handler(lambda message: message.text != "‚è™ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
                    state=Card.getdescription)
@decorator_check_admin
async def get_new_description(message: types.Message, state: FSMContext):

    worker_tg_id = await state.get_data()
    new_text = await convert_corect_text(message.text)

    try:
        await update_worker_description(worker_tg_id["telegram_worker_id"], new_text)

        await well_done(message, state)
    except:
        msg = await message.answer(text='–í —Ç–µ–∫—Å—Ç—ñ –ø—Ä–∏—Å—É—Ç–Ω—ñ —Å–ø–µ—Ü-—Å–∏–º–≤–æ–ª–∏.\n\n'
                                        '–ë—É–¥—å –ª–∞—Å–∫–∞ –≤–∏–¥–∞–ª—ñ—Ç—å –æ–¥–∏–Ω–∞—Ä–Ω—ñ, –ø–æ–¥–≤—ñ–π–Ω—ñ –¥—É–∂–∫–∏, –∫–æ—Å—ñ –ª—ñ–Ω—ñ—ó, –∫—Ä–∞–ø–∫–∏ –∑ –∫–æ–º–æ—é',
                                   reply_markup=r_back_to_menu_admin)
        await add_message_from_bot(msg)
