# Aiogram
from aiogram.dispatcher import FSMContext

from database.adm_client_db import update_name_client, update_personal_info_client, update_phone_client, \
    update_trainer_client, get_trainer_id
from loader import dp, bot
from aiogram import types

# Database
from database.msg_id_history_db import add_message_from_bot

# Other
from other.admin_other import convert_corect_text, well_done, answer_trainer_list, get_client_id
from other.func_other import decorator_check_admin, dell_message
from keybords.k_search_client import r_edit_client_info
from keybords.admin_menu import r_back_to_menu_admin
from state.reg import ClientCard


@dp.message_handler(lambda message: message.text == '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –¥–∞–Ω–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞üìù')
@decorator_check_admin
async def ed_client_info(message: types.Message):
    msg = await message.answer('–í —Ü—å–æ–º—É –º–µ–Ω—é –≤–∏ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –¥–∞–Ω–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞üòä \n\n'
                               '–û–±–µ—Ä—ñ—Ç—å —â–æ —Å–∞–º–µ –±–∞–∂–∞—î—Ç–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏', reply_markup=r_edit_client_info)
    await add_message_from_bot(msg)


@dp.message_handler(lambda message: message.text == '–Ü–º—èüé´')
@decorator_check_admin
async def ed_client_name(message: types.Message, state: FSMContext):
    msg = await message.answer(text=f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–º—è –∫–ª—ñ—î–Ω—Ç–∞", reply_markup=r_back_to_menu_admin)

    await dell_message(message.from_user.id)
    await add_message_from_bot(msg)

    await ClientCard.edit_name.set()


@dp.message_handler(lambda message: message.text != "‚è™ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", state=ClientCard.edit_name)
@decorator_check_admin
async def get_new_name(message: types.Message, state: FSMContext):
    checked_text = await convert_corect_text(message.text)
    tg_id_client = await state.get_data()
    tg_id_client = tg_id_client['tg_client_id']

    await update_name_client(tg_id_client, checked_text)

    await well_done(message=message, state=state)


@dp.message_handler(lambda message: message.text == '–ö–æ–º–µ–Ω—Ç–∞—Äüì∞')
@decorator_check_admin
async def ed_client_comment(message: types.Message, state: FSMContext):
    msg = await message.answer(text=f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞", reply_markup=r_back_to_menu_admin)

    await dell_message(message.from_user.id)
    await add_message_from_bot(msg)

    await ClientCard.edit_commet.set()


@dp.message_handler(lambda message: message.text != "‚è™ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", state=ClientCard.edit_commet)
@decorator_check_admin
async def get_new_comment(message: types.Message, state: FSMContext):

    checked_text = await convert_corect_text(message.text)
    tg_id_client = await state.get_data()
    tg_id_client = tg_id_client['tg_client_id']

    await update_personal_info_client(tg_id_client, checked_text)
    await well_done(message=message, state=state)


@dp.message_handler(lambda message: message.text == '–¢–µ–ª–µ—Ñ–æ–Ωüì±')
@decorator_check_admin
async def ed_client_phone(message: types.Message, state: FSMContext):
    msg = await message.answer(text=f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª—ñ—î–Ω—Ç–∞\n\n"
                                    f"–í–≤–æ–¥—å—Ç–µ —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏ –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –∑–Ω–∞–∫—ñ–≤: +:- –∏—Ç–¥.",
                               reply_markup=r_back_to_menu_admin)

    await dell_message(message.from_user.id)
    await add_message_from_bot(msg)

    await ClientCard.edit_phone.set()


@dp.message_handler(lambda message: message.text != "‚è™ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", state=ClientCard.edit_phone)
@decorator_check_admin
async def get_new_phone(message: types.Message, state: FSMContext):
    checked_text = await convert_corect_text(message.text)
    tg_id_client = await state.get_data()
    tg_id_client = tg_id_client['tg_client_id']

    await update_phone_client(tg_id_client, checked_text)
    await well_done(message=message, state=state)


@dp.message_handler(lambda message: message.text == '–¢—Ä–µ–Ω–µ—Äüëçüèª')
@decorator_check_admin
async def ed_client_trainer(message: types.Message, state: FSMContext):
    state_data = await state.get_data()
    id_defoult_trainer = state_data['defoult_tarainer']

    msg = await message.answer(text=f"–û–±–µ—Ä—ñ—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞ –∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö", reply_markup=r_back_to_menu_admin)

    await dell_message(message.from_user.id)
    await add_message_from_bot(msg)

    await answer_trainer_list(message, 'cgtrainer')


@dp.callback_query_handler(lambda callback: callback.data.startswith('cgtrainer'))
async def edit_defoult_trainer(callback: types.CallbackQuery, state: FSMContext):

    tg_trainer_id = get_client_id(callback)
    tg_id_client = (await state.get_data())['tg_client_id']

    id_trainer = (await get_trainer_id(tg_trainer_id))[0][0]

    await callback.answer('–¢—Ä–µ–Ω–µ—Ä–∞ –∑–º—ñ–Ω–µ–Ω–æ‚úÖ')

    await update_trainer_client(telegram_id=tg_id_client,
                                trainer_id=id_trainer)

    await well_done(callback.message, state)



